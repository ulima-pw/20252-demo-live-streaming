//generated by gemini canvas
const express = require('express');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const PORT = process.env.PORT || 3001;

app.get('/', (req, res) => {
  res.send('El servidor WebSocket está funcionando.');
});

wss.on('connection', ws => {
  console.log('Un nuevo cliente se ha conectado.');

  // Escuchar mensajes del cliente
  ws.on('message', message => {
    try {
      const data = JSON.parse(message);
      
      switch (data.type) {
        case 'chatMessage':
          console.log(`Mensaje del chat de ${data.sender}: ${data.text}`);
          // Reenviar el mensaje a todos los clientes conectados
          wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ type: 'chatMessage', payload: data }));
            }
          });
          break;
        case 'gift':
          console.log(`¡Regalo de ${data.sender}!`);
          wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ type: 'gift', payload: data }));
            }
          });
          break;
        default:
          console.log('Tipo de mensaje no reconocido:', data.type);
      }
    } catch (error) {
      console.error('Error al parsear el mensaje:', error);
    }
  });

  ws.on('close', () => {
    console.log('Un cliente se ha desconectado.');
  });

  ws.on('error', error => {
    console.error('Error de WebSocket:', error);
  });
});

// Iniciar el servidor
server.listen(PORT, () => {
  console.log(`Servidor escuchando en http://localhost:${PORT}`);
});
